// Import image collections 
var five_year = ee.ImageCollection('projects/sat-io/open-datasets/GLC-FCS30D/five-years-map');
var annual = ee.ImageCollection('projects/sat-io/open-datasets/GLC-FCS30D/annual');
var points = ee.FeatureCollection('projects/ee-elizaveta/assets/points_wide');

// Filter points by year
var years = [1985, 1990, 1995];
var filteredPoints = {};
years.forEach(function(year) {
  filteredPoints[year] = points.filter(ee.Filter.eq('pr_land_cover_Year', year.toString()));
});

// Function to buffer the points 
function bufferPoints(radius, bounds) {
  return function(pt) {
    pt = ee.Feature(pt);
    var bufferedGeom = bounds ? pt.buffer(radius).bounds() : pt.buffer(radius);
    return ee.Feature(bufferedGeom).copyProperties(pt);
  };
}

var classes = [10, 11, 12, 20, 51, 52, 61, 62, 71, 72, 81, 82, 91, 92, 120, 121, 122, 
               130, 140, 150, 152, 153, 181, 182, 183, 184, 185, 186, 187, 190, 200, 
               201, 202, 210, 220, 0];


// Select images
var images = {
  1985: five_year.mosaic().select('b1'),
  1990: five_year.mosaic().select('b2'),
  1995: five_year.mosaic().select('b3')
};

// Apply edge detection
var edges = {};
years.forEach(function(year) {
  edges[year] = ee.Algorithms.CannyEdgeDetector({
    image: images[year], 
    threshold: 0.7,
    sigma: 1
  }).selfMask();
});

// Function to calculate the edge length for each class
function calculateEdgeLength(image, edges, geometry, classValue) {
  var classMask = image.eq(classValue);
  var classEdges = edges.updateMask(classMask);
  var edgeLength = classEdges.reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: geometry,  
    scale: 30,
    maxPixels: 1e9
  }).get(image.bandNames().get(0));
  return ee.Dictionary({class: classValue, length_m: edgeLength});
}

// Function to process edge lengths for points in a given year
function processEdgesForYear(filteredPoints, image, edges, year) {
  var bufferedPoints = filteredPoints.map(bufferPoints(5000, true));
  var results = bufferedPoints.map(function(point) {
    var edgeLengths = ee.List(classes.map(function(classValue) {
      return calculateEdgeLength(image, edges, point.geometry(), classValue);
    }));
    return point.set('edge_lengths', edgeLengths);
  });
  return results;
}

// Process edge lengths for points in each year
var edgeLengths = {};
years.forEach(function(year) {
  edgeLengths[year] = processEdgesForYear(filteredPoints[year], images[year], edges[year], year);
});

// Print the results
years.forEach(function(year) {
  print('Edge lengths for points in ' + year + ':', edgeLengths[year]);
});

// Function to unpack the edge_lengths list and create new features
function unpackEdgeLengths(feature) {
  var edgeLengths = ee.List(feature.get('edge_lengths'));
  var newFeatures = edgeLengths.map(function(el) {
    el = ee.Dictionary(el);
    return feature.copyProperties(feature).set({
      'class': el.get('class'),
      'length_m': el.get('length_m')  // Use 'length_m' here
    });
  });
  return ee.FeatureCollection(newFeatures);
}

// Map over the original feature collection and flatten the result
years.forEach(function(year) {
  var unpackedFeatureCollection = ee.FeatureCollection(edgeLengths[year]).map(unpackEdgeLengths).flatten();
  Export.table.toDrive({
    collection: unpackedFeatureCollection,
    description: 'lm_edgelength_' + year,
    folder: "GEE landcover metrics",
    fileFormat: 'CSV'
  });
});

/////////////////////////////////////////////////////
/////////////////  annual  //////////////////////////
/////////////////////////////////////////////////////

var annualmosaic = annual.mosaic();

for (var i = 1; i <= 16; i++) {
  var year = 1999 + i; // starts at year 2000 for annual maps
  var image = annualmosaic.select("b" + i);
  var filteredPoints = points.filter(ee.Filter.eq('pr_land_cover_Year', year.toString()));
  
  var edges = ee.Algorithms.CannyEdgeDetector({
    image: image, 
    threshold: 0.7,
    sigma: 1
  }).selfMask();
  
  var edgeLengths = processEdgesForYear(filteredPoints, image, edges, year.toString());

  var unpackedFeatureCollection = edgeLengths.map(unpackEdgeLengths).flatten();

  Export.table.toDrive({
    collection: unpackedFeatureCollection,
    description: 'lm_edgelength_' + year,
    folder: "GEE landcover metrics",
    fileFormat: 'CSV'
  });
}
